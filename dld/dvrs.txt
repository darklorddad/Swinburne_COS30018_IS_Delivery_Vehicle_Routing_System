## Project Assignment: Delivery Vehicle Routing System

This project requires you to implement and demonstrate a system for the Vehicle Routing Problem. [cite: 1, 2] The project is for the COS30018 - Intelligent Systems unit and is due by 11:59 pm on May 28, 2025 (Wednesday of Week 12). [cite: 1] It contributes 50% to your final result and is a group assignment for 4-5 students. [cite: 1]

### Summary of the Project

You will develop a solution for a courier company with multiple delivery vehicles. [cite: 3] The basic system assumes all parcels are at the company warehouse, and vehicles depart from and return to the warehouse after deliveries. [cite: 5] The project involves creating a system with two main roles:

* **Master Routing Agent (MRA):** This agent collects capacity constraints from Delivery Agents (DAs), receives the list of parcels for delivery, produces routes for all vehicles, and sends individual routes to the DAs. [cite: 6] The MRA's goal is to find the optimal solution. [cite: 7]
* **Delivery Agent (DA):** Multiple DAs will exist. Each DA sends its capacity constraint to the MRA and receives its individual schedule. [cite: 6]

The solution will assign a route to each DA to ensure all parcels are delivered and DAs return to the warehouse. [cite: 6]

### Key Constraints and Requirements:

* **Search/Optimisation Techniques:** The MRA can use any search or optimisation technique covered in the unit (e.g., Genetic Algorithms, Ant Colony Optimisation, Particle Swarm Optimisation, Constraint Satisfaction Problems) or a combination of them. [cite: 8] You are required to implement a search/optimisation technique of your own. [cite: 9, 12] While you can use Google OR-Tools or OptaPlanner as a baseline for testing, your core solution must be your own implementation. [cite: 9, 10, 11, 12]
* **Interaction Protocols:** DAs and the MRA must use clearly defined interaction protocols for communication and coordination. [cite: 13] A sequence diagram for the implemented service calls is required in your report. [cite: 14] Agents can use any standard content language. [cite: 15]
* **User Interface:** A GUI is needed for user input, parameter settings, and visualization. A configuration file should be used for default settings. [cite: 15]
* **Cost/Time Calculation:** Assume the cost/time to travel between two points (A and B) is calculated using the straight-line distance. [cite: 15]

### System Requirements:

* **Input Options:** The system should allow automatic creation of the delivery item list (based on the number of items) and loading the list from a text file.
* **Capacity Specification (Basic):** Vehicle capacity is defined by the number of items it can carry. [cite: 16] Assume the total capacity of all vehicles is not less than the number of items to be delivered. [cite: 17]
* **Alternative Capacity Specifications (Choose one):**
    * **Alternative 1:** Specify vehicle capacity using weight (total weight of items cannot exceed vehicle capacity). [cite: 18]
    * **Alternative 2:** The system should handle capacity mismatches, such as when total vehicle capacity is less than items to be delivered, or when items can only be carried by specific vehicles. [cite: 19]
* **Extensions (Optional, for higher marks):**
    * **Extension 1:** Implement vehicle routing problems with time windows (VRPTWs). [cite: 20] You will need to research how to capture input and other necessary parameters. [cite: 20]
    * **Extension 2:** Allow dynamic addition of parcels and delivery agents in real-time. Discuss specific requirements with your tutor. [cite: 21]

### Project Deliverables:

* **Source Code:** Maintained on a Git-based Version Control System (e.g., Github, Bitbucket, GitLab). [cite: 22] You must provide read-only access to the tutor/lecturer. [cite: 23] Specifically, provide read-only access to your git repository to shlee@swinburne.edu.my within one week of forming teams. [cite: 27]
* **Working Prototype Demo:** An illustrative demo of a working prototype.
* **Project Report (8-10 pages):** This should include:
    * Cover Page (with team details) and Table of Contents (TOC)
    * Introduction
    * Overall system architecture
    * Implemented interaction protocols
    * Implemented search/optimisation techniques
    * Scenarios/examples demonstrating how the system works
    * Critical analysis of the implementation
    * Summary/Conclusion [cite: 24]
* **Presentation + Demo Video Link (10 minutes duration):** The video link should be included in the project report. [cite: 31]

### Submission:

* Upload your work to Canvas by 11:59 pm on May 28, 2025 (Wednesday). [cite: 28]
* Create a single zip file containing your code and a working version of your system. [cite: 29]
* Standard late penalties apply: 10% deduction for each day late. Submissions more than 5 days late will receive a mark of 0%. [cite: 30]

### Marking Scheme:

The project is marked out of 80 for the core tasks, with an additional potential of 40 marks for a research component, allowing for a total of up to 120%. Penalties can be applied for poor programming practices (up to -20 marks) and failure to demonstrate weekly progress to your tutor (up to -50 marks). [cite: 25]

**Core Tasks:**
* **Task 1 (10 marks):** Basic interaction between DAs and MRA, including capacity submission, MRA receiving requests and item lists, route generation, and MRA notifying DAs of routes. [cite: 25]
* **Task 2 (20 marks):** MRA uses an optimisation technique to generate optimal route assignments. [cite: 25]
* **Task 3 (20 marks):** Complete either Alternative 1 (weight-based capacity) OR Alternative 2 (capacity mismatches). [cite: 25]
* **GUI (10 marks):** Route Assignment Visualisation Dashboard with associated cost for each route. [cite: 25]
* **Project Report (10 marks)** [cite: 25]
* **Project Presentation (Video - 10 marks)** [cite: 25]

**Research Component (Up to 40 marks):**
Choose one extension (like Extension 1 or 2, or another approved by your tutor) and complete it thoroughly. [cite: 25]

**Important Note:** Individual marks will be adjusted based on each team member's contribution as detailed in the 'Who did what' declaration. [cite: 26]
