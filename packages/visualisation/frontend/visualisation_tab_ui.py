import streamlit
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors # For distinct route colors

# Helper function to get coordinates for a stop ID
def _get_stop_coordinates(stop_id, config_data):
    if stop_id == "Warehouse":
        return config_data.get("warehouse_coordinates_x_y", [0, 0])
    for parcel in config_data.get("parcels", []):
        if parcel.get("id") == stop_id:
            return parcel.get("coordinates_x_y", [None, None])
    return [None, None] # Should not happen if data is consistent

# Renders the Visualisation tab.
def render_visualisation_tab(ss):

    if not ss.get("optimisation_run_complete") or not ss.get("optimisation_results"):
        streamlit.info("Optimisation results are not available. Please run an optimisation in the 'Optimisation' tab first to see the visualisation.")
        return

    if not ss.get("config_data"):
        streamlit.warning("Configuration data is not available. Cannot render visualisation.")
        return

    config_data = ss.config_data
    optimisation_results = ss.optimisation_results
    optimised_routes = optimisation_results.get("optimised_routes", [])

    if not optimised_routes:
        streamlit.info("No routes were generated by the optimisation.")
        return

    fig, ax = plt.subplots(figsize=(10, 8))

    # Plot warehouse
    wh_coords = config_data.get("warehouse_coordinates_x_y", [0, 0])
    ax.plot(wh_coords[0], wh_coords[1], 'ks', markersize=10, label='Warehouse (0,0)') # Black square

    # Plot all parcels
    parcel_coords_x = []
    parcel_coords_y = []
    parcel_ids = []
    for parcel in config_data.get("parcels", []):
        coords = parcel.get("coordinates_x_y")
        if coords and len(coords) == 2:
            parcel_coords_x.append(coords[0])
            parcel_coords_y.append(coords[1])
            parcel_ids.append(parcel.get("id"))
            ax.text(coords[0] + 0.1, coords[1] + 0.1, parcel.get("id", ""), fontsize=9)

    ax.plot(parcel_coords_x, parcel_coords_y, 'bo', markersize=5, label='Parcels') # Blue circles

    # Define a list of distinct colors for routes
    # Using a subset of Tableau colors for good visual distinction
    route_colors = list(mcolors.TABLEAU_COLORS.values()) 

    # Plot routes for each agent
    for i, route_info in enumerate(optimised_routes):
        agent_id = route_info.get("agent_id", f"Agent {i+1}")
        route_stop_ids = route_info.get("route_stop_ids", [])
        
        if not route_stop_ids:
            continue

        route_x = []
        route_y = []
        for stop_id in route_stop_ids:
            coords = _get_stop_coordinates(stop_id, config_data)
            if coords[0] is not None and coords[1] is not None:
                route_x.append(coords[0])
                route_y.append(coords[1])
        
        if route_x and route_y:
            color = route_colors[i % len(route_colors)] # Cycle through colors
            ax.plot(route_x, route_y, marker='.', linestyle='-', color=color, label=f"Route: {agent_id}", linewidth=2, markersize=8)

    ax.set_xlabel("X Coordinate")
    ax.set_ylabel("Y Coordinate")
    ax.set_title("Delivery Routes Visualisation")
    ax.legend(loc='upper left', bbox_to_anchor=(1.05, 1), borderaxespad=0.) # Legend outside plot
    ax.grid(True)
    plt.tight_layout(rect=[0, 0, 0.85, 1]) # Adjust layout to make space for legend

    streamlit.pyplot(fig)
